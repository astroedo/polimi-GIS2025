{
  "version": 3,
  "sources": ["../../ol/MapEventType.js", "../../ol/control/Control.js"],
  "sourcesContent": ["/**\r\n * @module ol/MapEventType\r\n */\r\n\r\n/**\r\n * @enum {string}\r\n */\r\nexport default {\r\n  /**\r\n   * Triggered after a map frame is rendered.\r\n   * @event module:ol/MapEvent~MapEvent#postrender\r\n   * @api\r\n   */\r\n  POSTRENDER: 'postrender',\r\n\r\n  /**\r\n   * Triggered when the map starts moving.\r\n   * @event module:ol/MapEvent~MapEvent#movestart\r\n   * @api\r\n   */\r\n  MOVESTART: 'movestart',\r\n\r\n  /**\r\n   * Triggered after the map is moved.\r\n   * @event module:ol/MapEvent~MapEvent#moveend\r\n   * @api\r\n   */\r\n  MOVEEND: 'moveend',\r\n\r\n  /**\r\n   * Triggered when loading of additional map data (tiles, images, features) starts.\r\n   * @event module:ol/MapEvent~MapEvent#loadstart\r\n   * @api\r\n   */\r\n  LOADSTART: 'loadstart',\r\n\r\n  /**\r\n   * Triggered when loading of additional map data has completed.\r\n   * @event module:ol/MapEvent~MapEvent#loadend\r\n   * @api\r\n   */\r\n  LOADEND: 'loadend',\r\n};\r\n\r\n/***\r\n * @typedef {'postrender'|'movestart'|'moveend'|'loadstart'|'loadend'} Types\r\n */\r\n", "/**\r\n * @module ol/control/Control\r\n */\r\nimport MapEventType from '../MapEventType.js';\r\nimport BaseObject from '../Object.js';\r\nimport {listen, unlistenByKey} from '../events.js';\r\nimport {VOID} from '../functions.js';\r\n\r\n/**\r\n * @typedef {Object} Options\r\n * @property {HTMLElement} [element] The element is the control's\r\n * container element. This only needs to be specified if you're developing\r\n * a custom control.\r\n * @property {function(import(\"../MapEvent.js\").default):void} [render] Function called when\r\n * the control should be re-rendered. This is called in a `requestAnimationFrame`\r\n * callback.\r\n * @property {HTMLElement|string} [target] Specify a target if you want\r\n * the control to be rendered outside of the map's viewport.\r\n */\r\n\r\n/**\r\n * @classdesc\r\n * A control is a visible widget with a DOM element in a fixed position on the\r\n * screen. They can involve user input (buttons), or be informational only;\r\n * the position is determined using CSS. By default these are placed in the\r\n * container with CSS class name `ol-overlaycontainer-stopevent`, but can use\r\n * any outside DOM element.\r\n *\r\n * This is the base class for controls. You can use it for simple custom\r\n * controls by creating the element with listeners, creating an instance:\r\n * ```js\r\n * const myControl = new Control({element: myElement});\r\n * ```\r\n * and then adding this to the map.\r\n *\r\n * The main advantage of having this as a control rather than a simple separate\r\n * DOM element is that preventing propagation is handled for you. Controls\r\n * will also be objects in a {@link module:ol/Collection~Collection}, so you can use their methods.\r\n *\r\n * You can also extend this base for your own control class. See\r\n * examples/custom-controls for an example of how to do this.\r\n *\r\n * @api\r\n */\r\nclass Control extends BaseObject {\r\n  /**\r\n   * @param {Options} options Control options.\r\n   */\r\n  constructor(options) {\r\n    super();\r\n\r\n    const element = options.element;\r\n    if (element && !options.target && !element.style.pointerEvents) {\r\n      element.style.pointerEvents = 'auto';\r\n    }\r\n\r\n    /**\r\n     * @protected\r\n     * @type {HTMLElement}\r\n     */\r\n    this.element = element ? element : null;\r\n\r\n    /**\r\n     * @private\r\n     * @type {HTMLElement}\r\n     */\r\n    this.target_ = null;\r\n\r\n    /**\r\n     * @private\r\n     * @type {import(\"../Map.js\").default|null}\r\n     */\r\n    this.map_ = null;\r\n\r\n    /**\r\n     * @protected\r\n     * @type {!Array<import(\"../events.js\").EventsKey>}\r\n     */\r\n    this.listenerKeys = [];\r\n\r\n    if (options.render) {\r\n      this.render = options.render;\r\n    }\r\n\r\n    if (options.target) {\r\n      this.setTarget(options.target);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Clean up.\r\n   * @override\r\n   */\r\n  disposeInternal() {\r\n    this.element?.remove();\r\n    super.disposeInternal();\r\n  }\r\n\r\n  /**\r\n   * Get the map associated with this control.\r\n   * @return {import(\"../Map.js\").default|null} Map.\r\n   * @api\r\n   */\r\n  getMap() {\r\n    return this.map_;\r\n  }\r\n\r\n  /**\r\n   * Remove the control from its current map and attach it to the new map.\r\n   * Pass `null` to just remove the control from the current map.\r\n   * Subclasses may set up event handlers to get notified about changes to\r\n   * the map here.\r\n   * @param {import(\"../Map.js\").default|null} map Map.\r\n   * @api\r\n   */\r\n  setMap(map) {\r\n    if (this.map_) {\r\n      this.element?.remove();\r\n    }\r\n    for (let i = 0, ii = this.listenerKeys.length; i < ii; ++i) {\r\n      unlistenByKey(this.listenerKeys[i]);\r\n    }\r\n    this.listenerKeys.length = 0;\r\n    this.map_ = map;\r\n    if (map) {\r\n      const target = this.target_ ?? map.getOverlayContainerStopEvent();\r\n      if (this.element) {\r\n        target.appendChild(this.element);\r\n      }\r\n      if (this.render !== VOID) {\r\n        this.listenerKeys.push(\r\n          listen(map, MapEventType.POSTRENDER, this.render, this),\r\n        );\r\n      }\r\n      map.render();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Renders the control.\r\n   * @param {import(\"../MapEvent.js\").default} mapEvent Map event.\r\n   * @api\r\n   */\r\n  render(mapEvent) {}\r\n\r\n  /**\r\n   * This function is used to set a target element for the control. It has no\r\n   * effect if it is called after the control has been added to the map (i.e.\r\n   * after `setMap` is called on the control). If no `target` is set in the\r\n   * options passed to the control constructor and if `setTarget` is not called\r\n   * then the control is added to the map's overlay container.\r\n   * @param {HTMLElement|string} target Target.\r\n   * @api\r\n   */\r\n  setTarget(target) {\r\n    this.target_ =\r\n      typeof target === 'string' ? document.getElementById(target) : target;\r\n  }\r\n}\r\n\r\nexport default Control;\r\n"],
  "mappings": ";;;;;;;;;;;;;;;AAAA,IAOO;AAPP;AAAA;AAOA,IAAO,uBAAQ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAMb,YAAY;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAOZ,WAAW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAOX,SAAS;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAOT,WAAW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAOX,SAAS;AAAA,IACX;AAAA;AAAA;;;AC1CA;AAAA;AAAA;AAAA;AAAA,IA4CM,SAoHC;AAhKP;AAAA;AAGA;AACA;AACA;AACA;AAsCA,IAAM,UAAN,cAAsB,eAAW;AAAA;AAAA;AAAA;AAAA,MAI/B,YAAY,SAAS;AACnB,cAAM;AAEN,cAAM,UAAU,QAAQ;AACxB,YAAI,WAAW,CAAC,QAAQ,UAAU,CAAC,QAAQ,MAAM,eAAe;AAC9D,kBAAQ,MAAM,gBAAgB;AAAA,QAChC;AAMA,aAAK,UAAU,UAAU,UAAU;AAMnC,aAAK,UAAU;AAMf,aAAK,OAAO;AAMZ,aAAK,eAAe,CAAC;AAErB,YAAI,QAAQ,QAAQ;AAClB,eAAK,SAAS,QAAQ;AAAA,QACxB;AAEA,YAAI,QAAQ,QAAQ;AAClB,eAAK,UAAU,QAAQ,MAAM;AAAA,QAC/B;AAAA,MACF;AAAA;AAAA;AAAA;AAAA;AAAA,MAMA,kBAAkB;AA7FpB;AA8FI,mBAAK,YAAL,mBAAc;AACd,cAAM,gBAAgB;AAAA,MACxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAOA,SAAS;AACP,eAAO,KAAK;AAAA,MACd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAUA,OAAO,KAAK;AAnHd;AAoHI,YAAI,KAAK,MAAM;AACb,qBAAK,YAAL,mBAAc;AAAA,QAChB;AACA,iBAAS,IAAI,GAAG,KAAK,KAAK,aAAa,QAAQ,IAAI,IAAI,EAAE,GAAG;AAC1D,wBAAc,KAAK,aAAa,CAAC,CAAC;AAAA,QACpC;AACA,aAAK,aAAa,SAAS;AAC3B,aAAK,OAAO;AACZ,YAAI,KAAK;AACP,gBAAM,SAAS,KAAK,WAAW,IAAI,6BAA6B;AAChE,cAAI,KAAK,SAAS;AAChB,mBAAO,YAAY,KAAK,OAAO;AAAA,UACjC;AACA,cAAI,KAAK,WAAW,MAAM;AACxB,iBAAK,aAAa;AAAA,cAChB,OAAO,KAAK,qBAAa,YAAY,KAAK,QAAQ,IAAI;AAAA,YACxD;AAAA,UACF;AACA,cAAI,OAAO;AAAA,QACb;AAAA,MACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAOA,OAAO,UAAU;AAAA,MAAC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAWlB,UAAU,QAAQ;AAChB,aAAK,UACH,OAAO,WAAW,WAAW,SAAS,eAAe,MAAM,IAAI;AAAA,MACnE;AAAA,IACF;AAEA,IAAO,kBAAQ;AAAA;AAAA;",
  "names": []
}
