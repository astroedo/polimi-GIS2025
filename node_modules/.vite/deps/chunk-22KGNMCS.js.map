{
  "version": 3,
  "sources": ["../../ol/VectorRenderTile.js", "../../ol/VectorTile.js"],
  "sourcesContent": ["/**\r\n * @module ol/VectorRenderTile\r\n */\r\nimport Tile from './Tile.js';\r\nimport {createCanvasContext2D, releaseCanvas} from './dom.js';\r\nimport {getUid} from './util.js';\r\n\r\n/**\r\n * @typedef {Object} ReplayState\r\n * @property {boolean} dirty Dirty.\r\n * @property {null|import(\"./render.js\").OrderFunction} renderedRenderOrder RenderedRenderOrder.\r\n * @property {number} renderedTileRevision RenderedTileRevision.\r\n * @property {number} renderedResolution RenderedResolution.\r\n * @property {number} renderedRevision RenderedRevision.\r\n * @property {number} renderedTileResolution RenderedTileResolution.\r\n * @property {number} renderedTileZ RenderedTileZ.\r\n */\r\n\r\n/**\r\n * @type {Array<HTMLCanvasElement>}\r\n */\r\nconst canvasPool = [];\r\n\r\nclass VectorRenderTile extends Tile {\r\n  /**\r\n   * @param {import(\"./tilecoord.js\").TileCoord} tileCoord Tile coordinate.\r\n   * @param {import(\"./TileState.js\").default} state State.\r\n   * @param {import(\"./tilecoord.js\").TileCoord} urlTileCoord Wrapped tile coordinate for source urls.\r\n   * @param {function(VectorRenderTile):Array<import(\"./VectorTile\").default>} getSourceTiles Function.\r\n   * @param {function(VectorRenderTile):void} removeSourceTiles Function.\r\n   */\r\n  constructor(\r\n    tileCoord,\r\n    state,\r\n    urlTileCoord,\r\n    getSourceTiles,\r\n    removeSourceTiles,\r\n  ) {\r\n    super(tileCoord, state, {transition: 0});\r\n\r\n    /**\r\n     * @private\r\n     * @type {CanvasRenderingContext2D|null}\r\n     */\r\n    this.context_ = null;\r\n\r\n    /**\r\n     * Executor groups. Read/written by the renderer.\r\n     * @type {Object<string, Array<import(\"./render/canvas/ExecutorGroup.js\").default>>}\r\n     */\r\n    this.executorGroups = {};\r\n\r\n    /**\r\n     * Number of loading source tiles. Read/written by the source.\r\n     * @type {number}\r\n     */\r\n    this.loadingSourceTiles = 0;\r\n\r\n    /**\r\n     * @type {Object<string, ImageData>}\r\n     */\r\n    this.hitDetectionImageData = {};\r\n\r\n    /**\r\n     * @private\r\n     * @type {!Object<string, ReplayState>}\r\n     */\r\n    this.replayState_ = {};\r\n\r\n    /**\r\n     * @type {Array<import(\"./VectorTile.js\").default>}\r\n     */\r\n    this.sourceTiles = [];\r\n\r\n    /**\r\n     * @type {Object<string, boolean>}\r\n     */\r\n    this.errorTileKeys = {};\r\n\r\n    /**\r\n     * @type {number}\r\n     */\r\n    this.wantedResolution;\r\n\r\n    /**\r\n     * @type {!function():Array<import(\"./VectorTile.js\").default>}\r\n     */\r\n    this.getSourceTiles = getSourceTiles.bind(undefined, this);\r\n\r\n    /**\r\n     * @type {!function(VectorRenderTile):void}\r\n     * @private\r\n     */\r\n    this.removeSourceTiles_ = removeSourceTiles;\r\n\r\n    /**\r\n     * @type {import(\"./tilecoord.js\").TileCoord}\r\n     */\r\n    this.wrappedTileCoord = urlTileCoord;\r\n  }\r\n\r\n  /**\r\n   * @return {CanvasRenderingContext2D} The rendering context.\r\n   */\r\n  getContext() {\r\n    if (!this.context_) {\r\n      this.context_ = createCanvasContext2D(1, 1, canvasPool);\r\n    }\r\n    return this.context_;\r\n  }\r\n\r\n  /**\r\n   * @return {boolean} Tile has a rendering context.\r\n   */\r\n  hasContext() {\r\n    return !!this.context_;\r\n  }\r\n\r\n  /**\r\n   * Get the Canvas for this tile.\r\n   * @return {HTMLCanvasElement} Canvas.\r\n   */\r\n  getImage() {\r\n    return this.hasContext() ? this.getContext().canvas : null;\r\n  }\r\n\r\n  /**\r\n   * @param {import(\"./layer/Layer.js\").default} layer Layer.\r\n   * @return {ReplayState} The replay state.\r\n   */\r\n  getReplayState(layer) {\r\n    const key = getUid(layer);\r\n    if (!(key in this.replayState_)) {\r\n      this.replayState_[key] = {\r\n        dirty: false,\r\n        renderedRenderOrder: null,\r\n        renderedResolution: NaN,\r\n        renderedRevision: -1,\r\n        renderedTileResolution: NaN,\r\n        renderedTileRevision: -1,\r\n        renderedTileZ: -1,\r\n      };\r\n    }\r\n    return this.replayState_[key];\r\n  }\r\n\r\n  /**\r\n   * Load the tile.\r\n   * @override\r\n   */\r\n  load() {\r\n    this.getSourceTiles();\r\n  }\r\n\r\n  /**\r\n   * Remove from the cache due to expiry\r\n   * @override\r\n   */\r\n  release() {\r\n    if (this.context_) {\r\n      releaseCanvas(this.context_);\r\n      canvasPool.push(this.context_.canvas);\r\n      this.context_ = null;\r\n    }\r\n    this.removeSourceTiles_(this);\r\n    this.sourceTiles.length = 0;\r\n    super.release();\r\n  }\r\n}\r\n\r\nexport default VectorRenderTile;\r\n", "/**\r\n * @module ol/VectorTile\r\n */\r\nimport Tile from './Tile.js';\r\nimport TileState from './TileState.js';\r\n\r\n/**\r\n * @template {import('./Feature.js').FeatureLike} FeatureType\r\n */\r\nclass VectorTile extends Tile {\r\n  /**\r\n   * @param {import(\"./tilecoord.js\").TileCoord} tileCoord Tile coordinate.\r\n   * @param {import(\"./TileState.js\").default} state State.\r\n   * @param {string} src Data source url.\r\n   * @param {import(\"./format/Feature.js\").default<FeatureType>} format Feature format.\r\n   * @param {import(\"./Tile.js\").LoadFunction} tileLoadFunction Tile load function.\r\n   * @param {import(\"./Tile.js\").Options} [options] Tile options.\r\n   */\r\n  constructor(tileCoord, state, src, format, tileLoadFunction, options) {\r\n    super(tileCoord, state, options);\r\n\r\n    /**\r\n     * Extent of this tile; set by the source.\r\n     * @type {import(\"./extent.js\").Extent}\r\n     */\r\n    this.extent = null;\r\n\r\n    /**\r\n     * @private\r\n     * @type {import(\"./format/Feature.js\").default<FeatureType>}\r\n     */\r\n    this.format_ = format;\r\n\r\n    /**\r\n     * @private\r\n     * @type {Array<FeatureType>}\r\n     */\r\n    this.features_ = null;\r\n\r\n    /**\r\n     * @private\r\n     * @type {import(\"./featureloader.js\").FeatureLoader}\r\n     */\r\n    this.loader_;\r\n\r\n    /**\r\n     * Feature projection of this tile; set by the source.\r\n     * @type {import(\"./proj/Projection.js\").default}\r\n     */\r\n    this.projection = null;\r\n\r\n    /**\r\n     * Resolution of this tile; set by the source.\r\n     * @type {number}\r\n     */\r\n    this.resolution;\r\n\r\n    /**\r\n     * @private\r\n     * @type {import(\"./Tile.js\").LoadFunction}\r\n     */\r\n    this.tileLoadFunction_ = tileLoadFunction;\r\n\r\n    /**\r\n     * @private\r\n     * @type {string}\r\n     */\r\n    this.url_ = src;\r\n\r\n    this.key = src;\r\n  }\r\n\r\n  /**\r\n   * @return {string} Tile url.\r\n   */\r\n  getTileUrl() {\r\n    return this.url_;\r\n  }\r\n\r\n  /**\r\n   * Get the feature format assigned for reading this tile's features.\r\n   * @return {import(\"./format/Feature.js\").default<FeatureType>} Feature format.\r\n   * @api\r\n   */\r\n  getFormat() {\r\n    return this.format_;\r\n  }\r\n\r\n  /**\r\n   * Get the features for this tile. Geometries will be in the view projection.\r\n   * @return {Array<FeatureType>} Features.\r\n   * @api\r\n   */\r\n  getFeatures() {\r\n    return this.features_;\r\n  }\r\n\r\n  /**\r\n   * Load not yet loaded URI.\r\n   * @override\r\n   */\r\n  load() {\r\n    if (this.state == TileState.IDLE) {\r\n      this.setState(TileState.LOADING);\r\n      this.tileLoadFunction_(this, this.url_);\r\n      if (this.loader_) {\r\n        this.loader_(this.extent, this.resolution, this.projection);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Handler for successful tile load.\r\n   * @param {Array<FeatureType>} features The loaded features.\r\n   * @param {import(\"./proj/Projection.js\").default} dataProjection Data projection.\r\n   */\r\n  onLoad(features, dataProjection) {\r\n    this.setFeatures(features);\r\n  }\r\n\r\n  /**\r\n   * Handler for tile load errors.\r\n   */\r\n  onError() {\r\n    this.setState(TileState.ERROR);\r\n  }\r\n\r\n  /**\r\n   * Function for use in a {@link module:ol/source/VectorTile~VectorTile}'s `tileLoadFunction`.\r\n   * Sets the features for the tile.\r\n   * @param {Array<FeatureType>} features Features.\r\n   * @api\r\n   */\r\n  setFeatures(features) {\r\n    this.features_ = features;\r\n    this.setState(TileState.LOADED);\r\n  }\r\n\r\n  /**\r\n   * Set the feature loader for reading this tile's features.\r\n   * @param {import(\"./featureloader.js\").FeatureLoader<FeatureType>} loader Feature loader.\r\n   * @api\r\n   */\r\n  setLoader(loader) {\r\n    this.loader_ = loader;\r\n  }\r\n}\r\n\r\nexport default VectorTile;\r\n"],
  "mappings": "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",
  "names": []
}
